{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    // Tells Apollo we will take care of everything\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      console.log(existing, args, cache);\n      const {\n        skip,\n        first\n      } = args; // Read number of items on the page from the cache\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      console.log(data); // First asks the read function for the items\n      // We can:\n      // Return the items because theyre already in the cache\n      // Or, we can return false from here, (network request)\n    },\n\n    merge() {} // This runs when the Apollo client comes back from the network\n    // with our product\n\n\n  };\n}","map":{"version":3,"sources":["/Users/chriswilson/Documents/GitHub/Advanced-React/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","merge"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;;AACW;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EAAsBC,IAAtB,EAA4BC,KAA5B;AACA,YAAM;AAAEG,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBL,IAAxB,CAFmC,CAInC;;AACA,YAAMM,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ,EANmC,CAOnC;AACA;AACA;AACA;AACD,KAbI;;AAcLG,IAAAA,KAAK,GAAG,CAAE,CAdL,CAeL;AACA;;;AAhBK,GAAP;AAkBD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, // Tells Apollo we will take care of everything\n    read(existing = [], { args, cache }) {\n      console.log(existing, args, cache);\n      const { skip, first } = args;\n\n      // Read number of items on the page from the cache\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      console.log(data);\n      // First asks the read function for the items\n      // We can:\n      // Return the items because theyre already in the cache\n      // Or, we can return false from here, (network request)\n    },\n    merge() {},\n    // This runs when the Apollo client comes back from the network\n    // with our product\n  };\n}\n"]},"metadata":{},"sourceType":"module"}