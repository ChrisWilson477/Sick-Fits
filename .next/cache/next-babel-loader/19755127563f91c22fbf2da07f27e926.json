{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nexport default function useForm(initial = {}) {\n  // create a state object for our inputs\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n  const initialValues = Object.value(initial).join('');\n  useEffect(() => {\n    setInputs(initial); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [initialValues]);\n\n  function handleChange(e) {\n    let {\n      value,\n      type,\n      name\n    } = e.target;\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      [value] = e.target.files;\n    }\n\n    console.log(inputs);\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']));\n    console.log(blankState);\n    setInputs(blankState);\n  }\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n}","map":{"version":3,"sources":["/Users/chriswilson/Documents/GitHub/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":["useState","useEffect","useForm","initial","inputs","setInputs","initialValues","Object","value","join","handleChange","e","type","name","target","parseInt","files","console","log","resetForm","clearForm","blankState","fromEntries","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAO,GAAG,EAA3B,EAA+B;AAC5C;AAEA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBL,QAAQ,CAACG,OAAD,CAApC;AACA,QAAMG,aAAa,GAAGC,MAAM,CAACC,KAAP,CAAaL,OAAb,EAAsBM,IAAtB,CAA2B,EAA3B,CAAtB;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,SAAS,CAACF,OAAD,CAAT,CADc,CAEd;AACD,GAHQ,EAGN,CAACG,aAAD,CAHM,CAAT;;AAKA,WAASI,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAI;AAAEH,MAAAA,KAAF;AAASI,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBF,CAAC,CAACG,MAA9B;;AACA,QAAIF,IAAI,KAAK,QAAb,EAAuB;AACrBJ,MAAAA,KAAK,GAAGO,QAAQ,CAACP,KAAD,CAAhB;AACD;;AACD,QAAII,IAAI,KAAK,MAAb,EAAqB;AACnB,OAACJ,KAAD,IAAUG,CAAC,CAACG,MAAF,CAASE,KAAnB;AACD;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYd,MAAZ;AACAC,IAAAA,SAAS,iCACJD,MADI;AAEP,OAACS,IAAD,GAAQL;AAFD,OAAT;AAID;;AAED,WAASW,SAAT,GAAqB;AACnBd,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD;;AAED,WAASiB,SAAT,GAAqB;AACnB,UAAMC,UAAU,GAAGd,MAAM,CAACe,WAAP,CACjBf,MAAM,CAACgB,OAAP,CAAenB,MAAf,EAAuBoB,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMjB,KAAN,CAAD,KAAkB,CAACiB,GAAD,EAAM,EAAN,CAA7C,CADiB,CAAnB;AAGAR,IAAAA,OAAO,CAACC,GAAR,CAAYG,UAAZ;AACAhB,IAAAA,SAAS,CAACgB,UAAD,CAAT;AACD;;AAED,SAAO;AACLjB,IAAAA,MADK;AAELM,IAAAA,YAFK;AAGLS,IAAAA,SAHK;AAILC,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useForm(initial = {}) {\n  // create a state object for our inputs\n\n  const [inputs, setInputs] = useState(initial);\n  const initialValues = Object.value(initial).join('');\n\n  useEffect(() => {\n    setInputs(initial);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [initialValues]);\n\n  function handleChange(e) {\n    let { value, type, name } = e.target;\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n    if (type === 'file') {\n      [value] = e.target.files;\n    }\n    console.log(inputs);\n    setInputs({\n      ...inputs,\n      [name]: value,\n    });\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    const blankState = Object.fromEntries(\n      Object.entries(inputs).map(([key, value]) => [key, ''])\n    );\n    console.log(blankState);\n    setInputs(blankState);\n  }\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}