{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    // Tells Apollo we will take care of everything\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      console.log(existing, args, cache);\n      const {\n        skip,\n        first\n      } = args; // Read number of items on the page from the cache\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); // Check if we have existing items\n\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length !== first) {\n        // Means we have no items and need to go to network for them\n        return false;\n      } // If there are items, then return cache and don't go to the network\n\n\n      if (items.length) {\n        console.log(`There are ${items.length} items in the cache! Gonna send them to Apollo!`);\n        return items;\n      }\n\n      return false; // fallback  to network\n      // First asks the read function for the items\n      // We can:\n      // Return the items because theyre already in the cache\n      // Or, we can return false from here, (network request)\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      console.log(`Merging items from network ${incoming.length}`);\n    } // This runs when the Apollo client comes back from the network\n    // with our product\n\n\n  };\n}","map":{"version":3,"sources":["/Users/chriswilson/Documents/GitHub/Advanced-React/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;;AACW;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EAAsBC,IAAtB,EAA4BC,KAA5B;AACA,YAAM;AAAEG,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBL,IAAxB,CAFmC,CAInC;;AACA,YAAMM,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACA,YAAMc,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARmC,CAUnC;;AACA,YAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD,OAfkC,CAiBnC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChBjB,QAAAA,OAAO,CAACC,GAAR,CACG,aAAYY,KAAK,CAACI,MAAO,iDAD5B;AAGA,eAAOJ,KAAP;AACD;;AACD,aAAO,KAAP,CAxBmC,CAwBrB;AACd;AACA;AACA;AACA;AACD,KA/BI;;AAgCLK,IAAAA,KAAK,CAACrB,QAAD,EAAWsB,QAAX,EAAqB;AAAErB,MAAAA;AAAF,KAArB,EAA+B;AAClCE,MAAAA,OAAO,CAACC,GAAR,CAAa,8BAA6BkB,QAAQ,CAACF,MAAO,EAA1D;AACD,KAlCI,CAmCL;AACA;;;AApCK,GAAP;AAsCD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, // Tells Apollo we will take care of everything\n    read(existing = [], { args, cache }) {\n      console.log(existing, args, cache);\n      const { skip, first } = args;\n\n      // Read number of items on the page from the cache\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n\n      // Check if we have existing items\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n      if (items.length !== first) {\n        // Means we have no items and need to go to network for them\n        return false;\n      }\n\n      // If there are items, then return cache and don't go to the network\n      if (items.length) {\n        console.log(\n          `There are ${items.length} items in the cache! Gonna send them to Apollo!`\n        );\n        return items;\n      }\n      return false; // fallback  to network\n      // First asks the read function for the items\n      // We can:\n      // Return the items because theyre already in the cache\n      // Or, we can return false from here, (network request)\n    },\n    merge(existing, incoming, { args }) {\n      console.log(`Merging items from network ${incoming.length}`);\n    },\n    // This runs when the Apollo client comes back from the network\n    // with our product\n  };\n}\n"]},"metadata":{},"sourceType":"module"}